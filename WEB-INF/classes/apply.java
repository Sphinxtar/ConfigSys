/**
* apply - Pass args of doc to convert to dom and style sheet to apply
*/
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.apache.xerces.parsers.DOMParser;

public class apply extends HttpServlet 
{
	static final long serialVersionUID = 1L;
	public String docroot; // location of doc root in initArgs from properties
	public String typedir; // location of types below root
	public String docspath; // location of doc
	public String typename; // location of xml dir below type
	public String doc; // doc to convert
	public String style; // stylesheet template
	public Document dox; // doc tree

	private static final String CONTENT_TYPE = "text/plain; charset=UTF-8";
	private static HttpSession session;

	/**
	* Process the HTTP doGet request.
	*/
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException
	{
		doRequest( request, response );
	}

	/**
	* Process the HTTP doPost request.
	*/
	public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException
	{
		doRequest( request, response );
	}

	/**
	* Process the HTTP request.
	*/
	public void doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException
	{
		PrintWriter out = null; // connection to the browser
		Document document;
		long dt;
		typedir = getServletContext().getInitParameter("typedir");
		docroot = getServletContext().getInitParameter("docroot");
		docspath = new String( docroot + File.separator + typedir );

		try
		{
			doc = request.getParameter( "doc" ); // doc
			style = request.getParameter( "style" ); // style
			typename = request.getParameter( "type" ); // type

			out = response.getWriter();
			response.setContentType(CONTENT_TYPE);

			DOMParser parser = new DOMParser();
			parser.parse( docspath + File.separator + typename + File.separator + doc + ".xml" );
			dox = parser.getDocument();
			dox.getDocumentElement().normalize();

			TransformerFactory tFactory = TransformerFactory.newInstance();
			StreamSource stylesource = new StreamSource( docroot + File.separator + style + ".xsl" );
			Transformer transformer = tFactory.newTransformer(stylesource);
			DOMSource source = new DOMSource(dox);
			StreamResult result = new StreamResult(out);
			transformer.transform(source, result);
			out.close();
		}
		catch (TransformerConfigurationException tce) // Error generated by the parser
		{
			System.out.println ("\n** TransformerFactory error");
			System.out.println("   " + tce.getMessage() );
			Throwable x = tce; // Use the contained exception, if any
			if (tce.getException() != null)
				x = tce.getException();
			x.printStackTrace();
		} 
		catch (TransformerException te) // Error generated by the parser
		{
			System.out.println ("\n** Transformation error");
			System.out.println("   " + te.getMessage() );
			Throwable x = te; // Use the contained exception, if any
			if (te.getException() != null)
				x = te.getException();
			x.printStackTrace();
		} 
		catch (SAXException sxe) // Error generated by this application or parser-initialization error
		{
			Exception  x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();
		} 
		catch (IOException ioe) // I/O error 
		{
			ioe.printStackTrace(); 
		}
	}
}
